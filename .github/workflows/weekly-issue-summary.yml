name: Weekly Issue Summary

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

env:
  # Configurable labels to include in summary (based on GitHub samples reference)
  LABELS_TO_INCLUDE: 'bug,help wanted,triage,enhancement,question,documentation'
  # Destination for posting summary (discussion or slack)
  POST_TO_DISCUSSION: 'true'
  DISCUSSION_CATEGORY: 'General'

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      discussions: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Issue Summary
        id: summary
        run: |
          echo "üìä **Weekly Issue Summary** - $(date -u +%Y-%m-%d)"
          echo ""
          # Portable date calculation for 7 days ago
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS/BSD date
            SEVEN_DAYS_AGO=$(date -u -v-7d +%Y-%m-%d)
          else
            # Linux/GNU date
            SEVEN_DAYS_AGO=$(date -u -d '7 days ago' +%Y-%m-%d)
          fi
          echo "üìÖ **Period:** $SEVEN_DAYS_AGO to $(date -u +%Y-%m-%d)"
          echo ""
          
          # Get total issues count (simplified approach)
          echo "Fetching issue data..."
          
          # Get total open issues
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length')
          echo "üìã **Open Issues:** $OPEN_ISSUES"
          
          # Get new issues created in the past week
          NEW_ISSUES=$(gh issue list --state all --json number,createdAt --jq '[.[] | select(.createdAt > "'$SEVEN_DAYS_AGO'T00:00:00Z'")] | length' 2>/dev/null || echo "0")
          echo "üÜï **New Issues (This Week):** $NEW_ISSUES"
          
          # Get closed issues in the past week
          CLOSED_THIS_WEEK=$(gh issue list --state closed --json number,closedAt --jq '[.[] | select(.closedAt != null and .closedAt > "'$SEVEN_DAYS_AGO'T00:00:00Z'")] | length' 2>/dev/null || echo "0")
          echo "‚úÖ **Closed Issues (This Week):** $CLOSED_THIS_WEEK"
          
          # Get total closed issues (all time)
          CLOSED_ISSUES=$(gh issue list --state closed --json number --jq 'length')
          echo "üìä **Closed Issues (All Time):** $CLOSED_ISSUES"
          
          # Get total issues
          TOTAL_ISSUES=$(gh issue list --state all --json number --jq 'length')
          echo "üìà **Total Issues:** $TOTAL_ISSUES"
          
          # Set outputs for use in subsequent steps
          echo "open_issues=$OPEN_ISSUES" >> $GITHUB_OUTPUT
          echo "new_issues=$NEW_ISSUES" >> $GITHUB_OUTPUT
          echo "closed_this_week=$CLOSED_THIS_WEEK" >> $GITHUB_OUTPUT
          echo "closed_issues=$CLOSED_ISSUES" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "seven_days_ago=$SEVEN_DAYS_AGO" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üè∑Ô∏è **Issues by Label:**"
          
          # Split labels and process each
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            # Trim whitespace
            label=$(echo "$label" | xargs)
            
            # Count open issues with this label
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            
            # Count closed issues with this label (all time)
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              echo "- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed (all time)"
            fi
          done
          
          echo ""
          echo "üìà **Summary:**"
          echo "- Open issues: $OPEN_ISSUES"
          echo "- New issues this week: $NEW_ISSUES"
          echo "- Closed this week: $CLOSED_THIS_WEEK"
          echo "- Closed issues (all time): $CLOSED_ISSUES"
          echo "- Total issues: $TOTAL_ISSUES"
          
          # Calculate completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            echo "- Completion rate: $COMPLETION_RATE%"
          else
            echo "- Completion rate: N/A (no issues)"
          fi
          
          echo ""
          echo "üîó **View all issues:** [GitHub Issues](https://github.com/${{ github.repository }}/issues)"
          echo ""
          echo "---"
          echo "*This summary is automatically generated every Monday at 9 AM UTC*"
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post to Discussion
        if: env.POST_TO_DISCUSSION == 'true'
        run: |
          # Create discussion title
          TITLE="üìä Weekly Issue Summary - $(date -u +%Y-%m-%d)"
          
          # Use issue counts from previous step
          OPEN_ISSUES="${{ steps.summary.outputs.open_issues }}"
          NEW_ISSUES="${{ steps.summary.outputs.new_issues }}"
          CLOSED_THIS_WEEK="${{ steps.summary.outputs.closed_this_week }}"
          CLOSED_ISSUES="${{ steps.summary.outputs.closed_issues }}"
          TOTAL_ISSUES="${{ steps.summary.outputs.total_issues }}"
          SEVEN_DAYS_AGO="${{ steps.summary.outputs.seven_days_ago }}"
          
          # Create summary content
          echo "üìä **Weekly Issue Summary** - $(date -u +%Y-%m-%d)" > summary_content.txt
          echo "" >> summary_content.txt
          echo "üìÖ **Period:** $SEVEN_DAYS_AGO to $(date -u +%Y-%m-%d)" >> summary_content.txt
          echo "" >> summary_content.txt
          echo "üìã **Open Issues:** $OPEN_ISSUES" >> summary_content.txt
          echo "üÜï **New Issues (This Week):** $NEW_ISSUES" >> summary_content.txt
          echo "‚úÖ **Closed Issues (This Week):** $CLOSED_THIS_WEEK" >> summary_content.txt
          echo "üìä **Closed Issues (All Time):** $CLOSED_ISSUES" >> summary_content.txt
          echo "üìà **Total Issues:** $TOTAL_ISSUES" >> summary_content.txt
          echo "" >> summary_content.txt
          echo "üè∑Ô∏è **Issues by Label:**" >> summary_content.txt
          
          # Add label breakdown
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            label=$(echo "$label" | xargs)
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              echo "- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed (all time)" >> summary_content.txt
            fi
          done
          
          # Calculate completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            echo "" >> summary_content.txt
            echo "üìà **Summary:**" >> summary_content.txt
            echo "- Open issues: $OPEN_ISSUES" >> summary_content.txt
            echo "- New issues this week: $NEW_ISSUES" >> summary_content.txt
            echo "- Closed this week: $CLOSED_THIS_WEEK" >> summary_content.txt
            echo "- Closed issues (all time): $CLOSED_ISSUES" >> summary_content.txt
            echo "- Total issues: $TOTAL_ISSUES" >> summary_content.txt
            echo "- Completion rate: $COMPLETION_RATE%" >> summary_content.txt
          else
            echo "" >> summary_content.txt
            echo "üìà **Summary:**" >> summary_content.txt
            echo "- Open issues: $OPEN_ISSUES" >> summary_content.txt
            echo "- New issues this week: $NEW_ISSUES" >> summary_content.txt
            echo "- Closed this week: $CLOSED_THIS_WEEK" >> summary_content.txt
            echo "- Closed issues (all time): $CLOSED_ISSUES" >> summary_content.txt
            echo "- Total issues: $TOTAL_ISSUES" >> summary_content.txt
            echo "- Completion rate: N/A (no issues)" >> summary_content.txt
          fi
          
          echo "" >> summary_content.txt
          echo "üîó **View all issues:** [GitHub Issues](https://github.com/${{ github.repository }}/issues)" >> summary_content.txt
          echo "" >> summary_content.txt
          echo "---" >> summary_content.txt
          echo "*This summary is automatically generated every Monday at 9 AM UTC*" >> summary_content.txt
          
          # Read the content for posting
          SUMMARY_CONTENT=$(cat summary_content.txt)
          
          # Post to discussion using GraphQL API (required for discussions)
          echo "Posting to GitHub Discussions..."
          
          # First, get the repository ID and discussion category ID
          REPO_ID=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                id
                discussionCategories(first: 10) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" --jq '.data.repository.id')
          
          # Get the General category ID
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                discussionCategories(first: 10) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" --jq '.data.repository.discussionCategories.nodes[] | select(.name == "General") | .id')
          
          # Create discussion using GraphQL mutation
          if [ -n "$REPO_ID" ] && [ -n "$CATEGORY_ID" ]; then
            if gh api graphql -f query='
              mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                createDiscussion(input: {
                  repositoryId: $repositoryId
                  categoryId: $categoryId
                  title: $title
                  body: $body
                }) {
                  discussion {
                    id
                    url
                  }
                }
              }' -f repositoryId="$REPO_ID" -f categoryId="$CATEGORY_ID" -f title="$TITLE" -f body="$SUMMARY_CONTENT"; then
              echo "‚úÖ Discussion posted successfully!"
            else
              echo "‚ùå Discussion posting failed - GraphQL mutation failed"
              echo "üìù Summary content saved to artifact instead"
              echo "$SUMMARY_CONTENT" > discussion_fallback.txt
            fi
          else
            echo "‚ùå Discussion posting failed - Could not find repository or category ID"
            echo "üìù Summary content saved to artifact instead"
            echo "$SUMMARY_CONTENT" > discussion_fallback.txt
          fi
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Summary Artifact
        run: |
          # Use issue counts from previous step
          OPEN_ISSUES="${{ steps.summary.outputs.open_issues }}"
          NEW_ISSUES="${{ steps.summary.outputs.new_issues }}"
          CLOSED_THIS_WEEK="${{ steps.summary.outputs.closed_this_week }}"
          CLOSED_ISSUES="${{ steps.summary.outputs.closed_issues }}"
          TOTAL_ISSUES="${{ steps.summary.outputs.total_issues }}"
          SEVEN_DAYS_AGO="${{ steps.summary.outputs.seven_days_ago }}"
          
          # Create markdown file
          echo "üìä Weekly Issue Summary - $(date -u +%Y-%m-%d)" > issue-summary.md
          echo "" >> issue-summary.md
          echo "üìÖ Period: $SEVEN_DAYS_AGO to $(date -u +%Y-%m-%d)" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "üìã Open Issues: $OPEN_ISSUES" >> issue-summary.md
          echo "üÜï New Issues (This Week): $NEW_ISSUES" >> issue-summary.md
          echo "‚úÖ Closed Issues (This Week): $CLOSED_THIS_WEEK" >> issue-summary.md
          echo "üìä Closed Issues (All Time): $CLOSED_ISSUES" >> issue-summary.md
          echo "üìà Total Issues: $TOTAL_ISSUES" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "üè∑Ô∏è Issues by Label:" >> issue-summary.md
          
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            label=$(echo "$label" | xargs)
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              echo "- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed (all time)" >> issue-summary.md
            fi
          done
          
          # Add completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            echo "" >> issue-summary.md
            echo "üìà Summary:" >> issue-summary.md
            echo "- Completion rate: $COMPLETION_RATE%" >> issue-summary.md
          fi
          
          echo "" >> issue-summary.md
          echo "üîó View all issues: https://github.com/${{ github.repository }}/issues" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "---" >> issue-summary.md
          echo "*This summary is automatically generated every Monday at 9 AM UTC*" >> issue-summary.md
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Summary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-issue-summary
          path: |
            issue-summary.md
            discussion_fallback.txt
          if-no-files-found: ignore
          retention-days: 30
